# Main vull library.
add_library(vull)
target_compile_features(vull PRIVATE cxx_std_20)
target_compile_options(vull PRIVATE ${VULL_COMPILER_FLAGS_LIST})
target_include_directories(vull PUBLIC include)
target_link_libraries(vull PUBLIC xxHash::xxHash PRIVATE Zstd::Zstd)

if(VULL_BUILD_UI)
    target_link_libraries(vull PRIVATE Freetype::Freetype harfbuzz::harfbuzz)
endif()

if(VULL_BUILD_X11_WINDOW)
    target_link_libraries(vull PRIVATE X11::xcb X11::xcb_randr X11::xcb_util X11::xcb_xkb)
endif()

# Separate shaderc library. This is a separate library rather than a component since you'd likely want the shader
# compiler to be built for development, but not shipped with the final game.
add_library(vull-shaderc)
target_compile_features(vull-shaderc PRIVATE cxx_std_20)
target_compile_options(vull-shaderc PRIVATE ${VULL_COMPILER_FLAGS_LIST})
target_link_libraries(vull-shaderc PRIVATE vull)

# Add alias targets.
add_library(vull::vull ALIAS vull)
add_library(vull::shaderc ALIAS vull-shaderc)

vull_add_shader(shaders/blit_tonemap.frag)
vull_add_shader(shaders/default.frag)
vull_add_shader(shaders/default.vert)
vull_add_shader(shaders/deferred.comp)
vull_add_shader(shaders/depth_reduce.comp)
vull_add_shader(shaders/draw_cull.comp)
vull_add_shader(shaders/fst.vert)
vull_add_shader(shaders/light_cull.comp)
vull_add_shader(shaders/object.vsl)
vull_add_shader(shaders/shadow.vert)
vull_add_shader(shaders/skybox.frag)
vull_add_shader(shaders/skybox.vert)
vull_add_shader(shaders/ui.frag)
vull_add_shader(shaders/ui.vert)

function(vull_depend_builtin target)
    target_add_vpak(${target} builtin.vpak
        ${CMAKE_SOURCE_DIR}/engine/fonts/Inter-Medium.otf /fonts/Inter-Medium
        ${CMAKE_SOURCE_DIR}/engine/fonts/RobotoMono-Regular.ttf /fonts/RobotoMono-Regular
        ${CMAKE_BINARY_DIR}/engine/shaders/blit_tonemap.frag.spv /shaders/blit_tonemap.frag
        ${CMAKE_BINARY_DIR}/engine/shaders/default.frag.spv /shaders/default.frag
        ${CMAKE_BINARY_DIR}/engine/shaders/default.vert.spv /shaders/default.vert
        ${CMAKE_BINARY_DIR}/engine/shaders/deferred.comp.spv /shaders/deferred.comp
        ${CMAKE_BINARY_DIR}/engine/shaders/depth_reduce.comp.spv /shaders/depth_reduce.comp
        ${CMAKE_BINARY_DIR}/engine/shaders/draw_cull.comp.spv /shaders/draw_cull.comp
        ${CMAKE_BINARY_DIR}/engine/shaders/fst.vert.spv /shaders/fst.vert
        ${CMAKE_BINARY_DIR}/engine/shaders/light_cull.comp.spv /shaders/light_cull.comp
        ${CMAKE_BINARY_DIR}/engine/shaders/object.vsl.spv /shaders/object
        ${CMAKE_BINARY_DIR}/engine/shaders/shadow.vert.spv /shaders/shadow.vert
        ${CMAKE_BINARY_DIR}/engine/shaders/skybox.frag.spv /shaders/skybox.frag
        ${CMAKE_BINARY_DIR}/engine/shaders/skybox.vert.spv /shaders/skybox.vert
        ${CMAKE_BINARY_DIR}/engine/shaders/ui.frag.spv /shaders/ui.frag
        ${CMAKE_BINARY_DIR}/engine/shaders/ui.vert.spv /shaders/ui.vert)
endfunction()

add_subdirectory(sources)
set_target_properties(vull PROPERTIES
    UNITY_BUILD ON
    UNITY_BUILD_MODE GROUP)
set_source_files_properties(
    sources/vulkan/buffer.cc
    sources/vulkan/command_buffer.cc
    sources/vulkan/descriptor_builder.cc
    sources/vulkan/fence.cc
    sources/vulkan/image.cc
    sources/vulkan/pipeline.cc
    sources/vulkan/query_pool.cc
    sources/vulkan/queue.cc
    sources/vulkan/semaphore.cc
    sources/vulkan/shader.cc
    sources/vulkan/swapchain.cc
    PROPERTIES UNITY_GROUP "vulkan-wrappers"
)

if(VULL_BUILD_TESTS)
    vull_add_executable(vull-tests)
    target_compile_options(vull-tests PRIVATE -Wno-ctad-maybe-unsupported;-Wno-float-equal;-Wno-shorten-64-to-32;-Wno-sign-conversion)
    target_link_libraries(vull-tests PRIVATE vull-shaderc)
    add_subdirectory(tests)

    add_custom_command(TARGET vull-tests
        POST_BUILD
        COMMAND "${CMAKE_COMMAND}"
        -D "\"TEST_EXECUTABLE:FILEPATH=$<TARGET_FILE:vull-tests>\""
        -P \"${CMAKE_SOURCE_DIR}/cmake/VullAddTests.cmake\"
        BYPRODUCTS vull_tests.cmake)
    set_property(DIRECTORY APPEND PROPERTY TEST_INCLUDE_FILES vull_tests.cmake)
endif()

if(VULL_BUILD_WAYLAND)
    # TODO: Extract this into a function.
    set(_header "${CMAKE_CURRENT_BINARY_DIR}/wayland/xdg-decoration-client.h")
    set(_source "${CMAKE_CURRENT_BINARY_DIR}/wayland/xdg-decoration.c")
    set(_schema "${WaylandProtocols_DIR}/unstable/xdg-decoration/xdg-decoration-unstable-v1.xml")
    file(MAKE_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/wayland")
    add_custom_command(OUTPUT "${_header}"
            COMMAND "${WaylandScanner_EXECUTABLE}" client-header "${_schema}" "${_header}"
            DEPENDS "${_schema}"
            VERBATIM)
    add_custom_command(OUTPUT "${_source}"
            COMMAND "${WaylandScanner_EXECUTABLE}" private-code "${_schema}" "${_source}"
            DEPENDS "${_schema}"
            VERBATIM)
    add_library(wl-xdg-decoration "${_source}" "${_header}")
    target_include_directories(wl-xdg-decoration PUBLIC "${CMAKE_CURRENT_BINARY_DIR}/wayland/")

    set(_header "${CMAKE_CURRENT_BINARY_DIR}/wayland/xdg-shell-client.h")
    set(_source "${CMAKE_CURRENT_BINARY_DIR}/wayland/xdg-shell.c")
    set(_schema "${WaylandProtocols_DIR}/stable/xdg-shell/xdg-shell.xml")
    file(MAKE_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/wayland")
    add_custom_command(OUTPUT "${_header}"
            COMMAND "${WaylandScanner_EXECUTABLE}" client-header "${_schema}" "${_header}"
            DEPENDS "${_schema}"
            VERBATIM)
    add_custom_command(OUTPUT "${_source}"
            COMMAND "${WaylandScanner_EXECUTABLE}" private-code "${_schema}" "${_source}"
            DEPENDS "${_schema}"
            VERBATIM)
    add_library(wl-xdg-shell "${_source}" "${_header}")
    target_include_directories(wl-xdg-shell PUBLIC "${CMAKE_CURRENT_BINARY_DIR}/wayland/")

    unset(_header)
    unset(_source)
    unset(_schema)

    target_link_libraries(vull-core PRIVATE wl-xdg-decoration wl-xdg-shell)
endif()
