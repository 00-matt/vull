// File generated by tools/gen_vk.py on 26-01-2022 19:06:38
#pragma once

#include <xcb/xcb.h> // NOLINT
#include <vulkan/vulkan_core.h> // NOLINT
#include <vulkan/vulkan_xcb.h> // NOLINT

namespace vull {

class ContextTable {
protected:
    VkInstance m_instance; // NOLINT
    VkPhysicalDevice m_physical_device; // NOLINT
    VkDevice m_device; // NOLINT

    void load_loader(PFN_vkGetInstanceProcAddr get_instance_proc_addr);
    void load_instance(PFN_vkGetInstanceProcAddr get_instance_proc_addr);
    void load_device();

private:
    PFN_vkAcquireNextImage2KHR m_vkAcquireNextImage2KHR;
    PFN_vkAcquireNextImageKHR m_vkAcquireNextImageKHR;
    PFN_vkAllocateCommandBuffers m_vkAllocateCommandBuffers;
    PFN_vkAllocateDescriptorSets m_vkAllocateDescriptorSets;
    PFN_vkAllocateMemory m_vkAllocateMemory;
    PFN_vkBeginCommandBuffer m_vkBeginCommandBuffer;
    PFN_vkBindBufferMemory m_vkBindBufferMemory;
    PFN_vkBindBufferMemory2 m_vkBindBufferMemory2;
    PFN_vkBindImageMemory m_vkBindImageMemory;
    PFN_vkBindImageMemory2 m_vkBindImageMemory2;
    PFN_vkCmdBeginQuery m_vkCmdBeginQuery;
    PFN_vkCmdBeginRenderPass m_vkCmdBeginRenderPass;
    PFN_vkCmdBeginRenderPass2 m_vkCmdBeginRenderPass2;
    PFN_vkCmdBeginRenderingKHR m_vkCmdBeginRenderingKHR;
    PFN_vkCmdBindDescriptorSets m_vkCmdBindDescriptorSets;
    PFN_vkCmdBindIndexBuffer m_vkCmdBindIndexBuffer;
    PFN_vkCmdBindPipeline m_vkCmdBindPipeline;
    PFN_vkCmdBindVertexBuffers m_vkCmdBindVertexBuffers;
    PFN_vkCmdBlitImage m_vkCmdBlitImage;
    PFN_vkCmdClearAttachments m_vkCmdClearAttachments;
    PFN_vkCmdClearColorImage m_vkCmdClearColorImage;
    PFN_vkCmdClearDepthStencilImage m_vkCmdClearDepthStencilImage;
    PFN_vkCmdCopyBuffer m_vkCmdCopyBuffer;
    PFN_vkCmdCopyBufferToImage m_vkCmdCopyBufferToImage;
    PFN_vkCmdCopyImage m_vkCmdCopyImage;
    PFN_vkCmdCopyImageToBuffer m_vkCmdCopyImageToBuffer;
    PFN_vkCmdCopyQueryPoolResults m_vkCmdCopyQueryPoolResults;
    PFN_vkCmdDispatch m_vkCmdDispatch;
    PFN_vkCmdDispatchBase m_vkCmdDispatchBase;
    PFN_vkCmdDispatchIndirect m_vkCmdDispatchIndirect;
    PFN_vkCmdDraw m_vkCmdDraw;
    PFN_vkCmdDrawIndexed m_vkCmdDrawIndexed;
    PFN_vkCmdDrawIndexedIndirect m_vkCmdDrawIndexedIndirect;
    PFN_vkCmdDrawIndexedIndirectCount m_vkCmdDrawIndexedIndirectCount;
    PFN_vkCmdDrawIndirect m_vkCmdDrawIndirect;
    PFN_vkCmdDrawIndirectCount m_vkCmdDrawIndirectCount;
    PFN_vkCmdEndQuery m_vkCmdEndQuery;
    PFN_vkCmdEndRenderPass m_vkCmdEndRenderPass;
    PFN_vkCmdEndRenderPass2 m_vkCmdEndRenderPass2;
    PFN_vkCmdEndRenderingKHR m_vkCmdEndRenderingKHR;
    PFN_vkCmdExecuteCommands m_vkCmdExecuteCommands;
    PFN_vkCmdFillBuffer m_vkCmdFillBuffer;
    PFN_vkCmdNextSubpass m_vkCmdNextSubpass;
    PFN_vkCmdNextSubpass2 m_vkCmdNextSubpass2;
    PFN_vkCmdPipelineBarrier m_vkCmdPipelineBarrier;
    PFN_vkCmdPushConstants m_vkCmdPushConstants;
    PFN_vkCmdResetEvent m_vkCmdResetEvent;
    PFN_vkCmdResetQueryPool m_vkCmdResetQueryPool;
    PFN_vkCmdResolveImage m_vkCmdResolveImage;
    PFN_vkCmdSetBlendConstants m_vkCmdSetBlendConstants;
    PFN_vkCmdSetDepthBias m_vkCmdSetDepthBias;
    PFN_vkCmdSetDepthBounds m_vkCmdSetDepthBounds;
    PFN_vkCmdSetDeviceMask m_vkCmdSetDeviceMask;
    PFN_vkCmdSetEvent m_vkCmdSetEvent;
    PFN_vkCmdSetLineWidth m_vkCmdSetLineWidth;
    PFN_vkCmdSetScissor m_vkCmdSetScissor;
    PFN_vkCmdSetStencilCompareMask m_vkCmdSetStencilCompareMask;
    PFN_vkCmdSetStencilReference m_vkCmdSetStencilReference;
    PFN_vkCmdSetStencilWriteMask m_vkCmdSetStencilWriteMask;
    PFN_vkCmdSetViewport m_vkCmdSetViewport;
    PFN_vkCmdUpdateBuffer m_vkCmdUpdateBuffer;
    PFN_vkCmdWaitEvents m_vkCmdWaitEvents;
    PFN_vkCmdWriteTimestamp m_vkCmdWriteTimestamp;
    PFN_vkCreateBuffer m_vkCreateBuffer;
    PFN_vkCreateBufferView m_vkCreateBufferView;
    PFN_vkCreateCommandPool m_vkCreateCommandPool;
    PFN_vkCreateComputePipelines m_vkCreateComputePipelines;
    PFN_vkCreateDescriptorPool m_vkCreateDescriptorPool;
    PFN_vkCreateDescriptorSetLayout m_vkCreateDescriptorSetLayout;
    PFN_vkCreateDescriptorUpdateTemplate m_vkCreateDescriptorUpdateTemplate;
    PFN_vkCreateDevice m_vkCreateDevice;
    PFN_vkCreateEvent m_vkCreateEvent;
    PFN_vkCreateFence m_vkCreateFence;
    PFN_vkCreateFramebuffer m_vkCreateFramebuffer;
    PFN_vkCreateGraphicsPipelines m_vkCreateGraphicsPipelines;
    PFN_vkCreateImage m_vkCreateImage;
    PFN_vkCreateImageView m_vkCreateImageView;
    PFN_vkCreateInstance m_vkCreateInstance;
    PFN_vkCreatePipelineCache m_vkCreatePipelineCache;
    PFN_vkCreatePipelineLayout m_vkCreatePipelineLayout;
    PFN_vkCreateQueryPool m_vkCreateQueryPool;
    PFN_vkCreateRenderPass m_vkCreateRenderPass;
    PFN_vkCreateRenderPass2 m_vkCreateRenderPass2;
    PFN_vkCreateSampler m_vkCreateSampler;
    PFN_vkCreateSamplerYcbcrConversion m_vkCreateSamplerYcbcrConversion;
    PFN_vkCreateSemaphore m_vkCreateSemaphore;
    PFN_vkCreateShaderModule m_vkCreateShaderModule;
    PFN_vkCreateSwapchainKHR m_vkCreateSwapchainKHR;
    PFN_vkCreateXcbSurfaceKHR m_vkCreateXcbSurfaceKHR;
    PFN_vkDestroyBuffer m_vkDestroyBuffer;
    PFN_vkDestroyBufferView m_vkDestroyBufferView;
    PFN_vkDestroyCommandPool m_vkDestroyCommandPool;
    PFN_vkDestroyDescriptorPool m_vkDestroyDescriptorPool;
    PFN_vkDestroyDescriptorSetLayout m_vkDestroyDescriptorSetLayout;
    PFN_vkDestroyDescriptorUpdateTemplate m_vkDestroyDescriptorUpdateTemplate;
    PFN_vkDestroyDevice m_vkDestroyDevice;
    PFN_vkDestroyEvent m_vkDestroyEvent;
    PFN_vkDestroyFence m_vkDestroyFence;
    PFN_vkDestroyFramebuffer m_vkDestroyFramebuffer;
    PFN_vkDestroyImage m_vkDestroyImage;
    PFN_vkDestroyImageView m_vkDestroyImageView;
    PFN_vkDestroyInstance m_vkDestroyInstance;
    PFN_vkDestroyPipeline m_vkDestroyPipeline;
    PFN_vkDestroyPipelineCache m_vkDestroyPipelineCache;
    PFN_vkDestroyPipelineLayout m_vkDestroyPipelineLayout;
    PFN_vkDestroyQueryPool m_vkDestroyQueryPool;
    PFN_vkDestroyRenderPass m_vkDestroyRenderPass;
    PFN_vkDestroySampler m_vkDestroySampler;
    PFN_vkDestroySamplerYcbcrConversion m_vkDestroySamplerYcbcrConversion;
    PFN_vkDestroySemaphore m_vkDestroySemaphore;
    PFN_vkDestroyShaderModule m_vkDestroyShaderModule;
    PFN_vkDestroySurfaceKHR m_vkDestroySurfaceKHR;
    PFN_vkDestroySwapchainKHR m_vkDestroySwapchainKHR;
    PFN_vkDeviceWaitIdle m_vkDeviceWaitIdle;
    PFN_vkEndCommandBuffer m_vkEndCommandBuffer;
    PFN_vkEnumerateDeviceExtensionProperties m_vkEnumerateDeviceExtensionProperties;
    PFN_vkEnumerateDeviceLayerProperties m_vkEnumerateDeviceLayerProperties;
    PFN_vkEnumerateInstanceExtensionProperties m_vkEnumerateInstanceExtensionProperties;
    PFN_vkEnumerateInstanceLayerProperties m_vkEnumerateInstanceLayerProperties;
    PFN_vkEnumerateInstanceVersion m_vkEnumerateInstanceVersion;
    PFN_vkEnumeratePhysicalDeviceGroups m_vkEnumeratePhysicalDeviceGroups;
    PFN_vkEnumeratePhysicalDevices m_vkEnumeratePhysicalDevices;
    PFN_vkFlushMappedMemoryRanges m_vkFlushMappedMemoryRanges;
    PFN_vkFreeCommandBuffers m_vkFreeCommandBuffers;
    PFN_vkFreeDescriptorSets m_vkFreeDescriptorSets;
    PFN_vkFreeMemory m_vkFreeMemory;
    PFN_vkGetBufferDeviceAddress m_vkGetBufferDeviceAddress;
    PFN_vkGetBufferMemoryRequirements m_vkGetBufferMemoryRequirements;
    PFN_vkGetBufferMemoryRequirements2 m_vkGetBufferMemoryRequirements2;
    PFN_vkGetBufferOpaqueCaptureAddress m_vkGetBufferOpaqueCaptureAddress;
    PFN_vkGetDescriptorSetLayoutSupport m_vkGetDescriptorSetLayoutSupport;
    PFN_vkGetDeviceGroupPeerMemoryFeatures m_vkGetDeviceGroupPeerMemoryFeatures;
    PFN_vkGetDeviceGroupPresentCapabilitiesKHR m_vkGetDeviceGroupPresentCapabilitiesKHR;
    PFN_vkGetDeviceGroupSurfacePresentModesKHR m_vkGetDeviceGroupSurfacePresentModesKHR;
    PFN_vkGetDeviceMemoryCommitment m_vkGetDeviceMemoryCommitment;
    PFN_vkGetDeviceMemoryOpaqueCaptureAddress m_vkGetDeviceMemoryOpaqueCaptureAddress;
    PFN_vkGetDeviceProcAddr m_vkGetDeviceProcAddr;
    PFN_vkGetDeviceQueue m_vkGetDeviceQueue;
    PFN_vkGetDeviceQueue2 m_vkGetDeviceQueue2;
    PFN_vkGetEventStatus m_vkGetEventStatus;
    PFN_vkGetFenceStatus m_vkGetFenceStatus;
    PFN_vkGetImageMemoryRequirements m_vkGetImageMemoryRequirements;
    PFN_vkGetImageMemoryRequirements2 m_vkGetImageMemoryRequirements2;
    PFN_vkGetImageSparseMemoryRequirements m_vkGetImageSparseMemoryRequirements;
    PFN_vkGetImageSparseMemoryRequirements2 m_vkGetImageSparseMemoryRequirements2;
    PFN_vkGetImageSubresourceLayout m_vkGetImageSubresourceLayout;
    PFN_vkGetPhysicalDeviceExternalBufferProperties m_vkGetPhysicalDeviceExternalBufferProperties;
    PFN_vkGetPhysicalDeviceExternalFenceProperties m_vkGetPhysicalDeviceExternalFenceProperties;
    PFN_vkGetPhysicalDeviceExternalSemaphoreProperties m_vkGetPhysicalDeviceExternalSemaphoreProperties;
    PFN_vkGetPhysicalDeviceFeatures m_vkGetPhysicalDeviceFeatures;
    PFN_vkGetPhysicalDeviceFeatures2 m_vkGetPhysicalDeviceFeatures2;
    PFN_vkGetPhysicalDeviceFormatProperties m_vkGetPhysicalDeviceFormatProperties;
    PFN_vkGetPhysicalDeviceFormatProperties2 m_vkGetPhysicalDeviceFormatProperties2;
    PFN_vkGetPhysicalDeviceImageFormatProperties m_vkGetPhysicalDeviceImageFormatProperties;
    PFN_vkGetPhysicalDeviceImageFormatProperties2 m_vkGetPhysicalDeviceImageFormatProperties2;
    PFN_vkGetPhysicalDeviceMemoryProperties m_vkGetPhysicalDeviceMemoryProperties;
    PFN_vkGetPhysicalDeviceMemoryProperties2 m_vkGetPhysicalDeviceMemoryProperties2;
    PFN_vkGetPhysicalDevicePresentRectanglesKHR m_vkGetPhysicalDevicePresentRectanglesKHR;
    PFN_vkGetPhysicalDeviceProperties m_vkGetPhysicalDeviceProperties;
    PFN_vkGetPhysicalDeviceProperties2 m_vkGetPhysicalDeviceProperties2;
    PFN_vkGetPhysicalDeviceQueueFamilyProperties m_vkGetPhysicalDeviceQueueFamilyProperties;
    PFN_vkGetPhysicalDeviceQueueFamilyProperties2 m_vkGetPhysicalDeviceQueueFamilyProperties2;
    PFN_vkGetPhysicalDeviceSparseImageFormatProperties m_vkGetPhysicalDeviceSparseImageFormatProperties;
    PFN_vkGetPhysicalDeviceSparseImageFormatProperties2 m_vkGetPhysicalDeviceSparseImageFormatProperties2;
    PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR m_vkGetPhysicalDeviceSurfaceCapabilitiesKHR;
    PFN_vkGetPhysicalDeviceSurfaceFormatsKHR m_vkGetPhysicalDeviceSurfaceFormatsKHR;
    PFN_vkGetPhysicalDeviceSurfacePresentModesKHR m_vkGetPhysicalDeviceSurfacePresentModesKHR;
    PFN_vkGetPhysicalDeviceSurfaceSupportKHR m_vkGetPhysicalDeviceSurfaceSupportKHR;
    PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR m_vkGetPhysicalDeviceXcbPresentationSupportKHR;
    PFN_vkGetPipelineCacheData m_vkGetPipelineCacheData;
    PFN_vkGetQueryPoolResults m_vkGetQueryPoolResults;
    PFN_vkGetRenderAreaGranularity m_vkGetRenderAreaGranularity;
    PFN_vkGetSemaphoreCounterValue m_vkGetSemaphoreCounterValue;
    PFN_vkGetSwapchainImagesKHR m_vkGetSwapchainImagesKHR;
    PFN_vkInvalidateMappedMemoryRanges m_vkInvalidateMappedMemoryRanges;
    PFN_vkMapMemory m_vkMapMemory;
    PFN_vkMergePipelineCaches m_vkMergePipelineCaches;
    PFN_vkQueueBindSparse m_vkQueueBindSparse;
    PFN_vkQueuePresentKHR m_vkQueuePresentKHR;
    PFN_vkQueueSubmit m_vkQueueSubmit;
    PFN_vkQueueWaitIdle m_vkQueueWaitIdle;
    PFN_vkResetCommandBuffer m_vkResetCommandBuffer;
    PFN_vkResetCommandPool m_vkResetCommandPool;
    PFN_vkResetDescriptorPool m_vkResetDescriptorPool;
    PFN_vkResetEvent m_vkResetEvent;
    PFN_vkResetFences m_vkResetFences;
    PFN_vkResetQueryPool m_vkResetQueryPool;
    PFN_vkSetEvent m_vkSetEvent;
    PFN_vkSignalSemaphore m_vkSignalSemaphore;
    PFN_vkTrimCommandPool m_vkTrimCommandPool;
    PFN_vkUnmapMemory m_vkUnmapMemory;
    PFN_vkUpdateDescriptorSetWithTemplate m_vkUpdateDescriptorSetWithTemplate;
    PFN_vkUpdateDescriptorSets m_vkUpdateDescriptorSets;
    PFN_vkWaitForFences m_vkWaitForFences;
    PFN_vkWaitSemaphores m_vkWaitSemaphores;

public:
    VkResult vkAcquireNextImage2KHR(const VkAcquireNextImageInfoKHR *pAcquireInfo, uint32_t *pImageIndex) const; // NOLINT
    VkResult vkAcquireNextImageKHR(VkSwapchainKHR swapchain, uint64_t timeout, VkSemaphore semaphore, VkFence fence, uint32_t *pImageIndex) const; // NOLINT
    VkResult vkAllocateCommandBuffers(const VkCommandBufferAllocateInfo *pAllocateInfo, VkCommandBuffer *pCommandBuffers) const; // NOLINT
    VkResult vkAllocateDescriptorSets(const VkDescriptorSetAllocateInfo *pAllocateInfo, VkDescriptorSet *pDescriptorSets) const; // NOLINT
    VkResult vkAllocateMemory(const VkMemoryAllocateInfo *pAllocateInfo, VkDeviceMemory *pMemory) const; // NOLINT
    VkResult vkBeginCommandBuffer(VkCommandBuffer commandBuffer, const VkCommandBufferBeginInfo *pBeginInfo) const; // NOLINT
    VkResult vkBindBufferMemory(VkBuffer buffer, VkDeviceMemory memory, VkDeviceSize memoryOffset) const; // NOLINT
    VkResult vkBindBufferMemory2(uint32_t bindInfoCount, const VkBindBufferMemoryInfo *pBindInfos) const; // NOLINT
    VkResult vkBindImageMemory(VkImage image, VkDeviceMemory memory, VkDeviceSize memoryOffset) const; // NOLINT
    VkResult vkBindImageMemory2(uint32_t bindInfoCount, const VkBindImageMemoryInfo *pBindInfos) const; // NOLINT
    void vkCmdBeginQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags) const; // NOLINT
    void vkCmdBeginRenderPass(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo *pRenderPassBegin, VkSubpassContents contents) const; // NOLINT
    void vkCmdBeginRenderPass2(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo *pRenderPassBegin, const VkSubpassBeginInfo *pSubpassBeginInfo) const; // NOLINT
    void vkCmdBeginRenderingKHR(VkCommandBuffer commandBuffer, const VkRenderingInfoKHR *pRenderingInfo) const; // NOLINT
    void vkCmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t firstSet, uint32_t descriptorSetCount, const VkDescriptorSet *pDescriptorSets, uint32_t dynamicOffsetCount, const uint32_t *pDynamicOffsets) const; // NOLINT
    void vkCmdBindIndexBuffer(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType) const; // NOLINT
    void vkCmdBindPipeline(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline) const; // NOLINT
    void vkCmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer *pBuffers, const VkDeviceSize *pOffsets) const; // NOLINT
    void vkCmdBlitImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageBlit *pRegions, VkFilter filter) const; // NOLINT
    void vkCmdClearAttachments(VkCommandBuffer commandBuffer, uint32_t attachmentCount, const VkClearAttachment *pAttachments, uint32_t rectCount, const VkClearRect *pRects) const; // NOLINT
    void vkCmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearColorValue *pColor, uint32_t rangeCount, const VkImageSubresourceRange *pRanges) const; // NOLINT
    void vkCmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearDepthStencilValue *pDepthStencil, uint32_t rangeCount, const VkImageSubresourceRange *pRanges) const; // NOLINT
    void vkCmdCopyBuffer(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferCopy *pRegions) const; // NOLINT
    void vkCmdCopyBufferToImage(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkBufferImageCopy *pRegions) const; // NOLINT
    void vkCmdCopyImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageCopy *pRegions) const; // NOLINT
    void vkCmdCopyImageToBuffer(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferImageCopy *pRegions) const; // NOLINT
    void vkCmdCopyQueryPoolResults(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags) const; // NOLINT
    void vkCmdDispatch(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ) const; // NOLINT
    void vkCmdDispatchBase(VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ) const; // NOLINT
    void vkCmdDispatchIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset) const; // NOLINT
    void vkCmdDraw(VkCommandBuffer commandBuffer, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance) const; // NOLINT
    void vkCmdDrawIndexed(VkCommandBuffer commandBuffer, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t vertexOffset, uint32_t firstInstance) const; // NOLINT
    void vkCmdDrawIndexedIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride) const; // NOLINT
    void vkCmdDrawIndexedIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride) const; // NOLINT
    void vkCmdDrawIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride) const; // NOLINT
    void vkCmdDrawIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride) const; // NOLINT
    void vkCmdEndQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query) const; // NOLINT
    void vkCmdEndRenderPass(VkCommandBuffer commandBuffer) const; // NOLINT
    void vkCmdEndRenderPass2(VkCommandBuffer commandBuffer, const VkSubpassEndInfo *pSubpassEndInfo) const; // NOLINT
    void vkCmdEndRenderingKHR(VkCommandBuffer commandBuffer) const; // NOLINT
    void vkCmdExecuteCommands(VkCommandBuffer commandBuffer, uint32_t commandBufferCount, const VkCommandBuffer *pCommandBuffers) const; // NOLINT
    void vkCmdFillBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint32_t data) const; // NOLINT
    void vkCmdNextSubpass(VkCommandBuffer commandBuffer, VkSubpassContents contents) const; // NOLINT
    void vkCmdNextSubpass2(VkCommandBuffer commandBuffer, const VkSubpassBeginInfo *pSubpassBeginInfo, const VkSubpassEndInfo *pSubpassEndInfo) const; // NOLINT
    void vkCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint32_t memoryBarrierCount, const VkMemoryBarrier *pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier *pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier *pImageMemoryBarriers) const; // NOLINT
    void vkCmdPushConstants(VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint32_t offset, uint32_t size, const void *pValues) const; // NOLINT
    void vkCmdResetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask) const; // NOLINT
    void vkCmdResetQueryPool(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount) const; // NOLINT
    void vkCmdResolveImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageResolve *pRegions) const; // NOLINT
    void vkCmdSetBlendConstants(VkCommandBuffer commandBuffer, const float blendConstants [4]) const; // NOLINT
    void vkCmdSetDepthBias(VkCommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor) const; // NOLINT
    void vkCmdSetDepthBounds(VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds) const; // NOLINT
    void vkCmdSetDeviceMask(VkCommandBuffer commandBuffer, uint32_t deviceMask) const; // NOLINT
    void vkCmdSetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask) const; // NOLINT
    void vkCmdSetLineWidth(VkCommandBuffer commandBuffer, float lineWidth) const; // NOLINT
    void vkCmdSetScissor(VkCommandBuffer commandBuffer, uint32_t firstScissor, uint32_t scissorCount, const VkRect2D *pScissors) const; // NOLINT
    void vkCmdSetStencilCompareMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t compareMask) const; // NOLINT
    void vkCmdSetStencilReference(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t reference) const; // NOLINT
    void vkCmdSetStencilWriteMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t writeMask) const; // NOLINT
    void vkCmdSetViewport(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewport *pViewports) const; // NOLINT
    void vkCmdUpdateBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, const void *pData) const; // NOLINT
    void vkCmdWaitEvents(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent *pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint32_t memoryBarrierCount, const VkMemoryBarrier *pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier *pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier *pImageMemoryBarriers) const; // NOLINT
    void vkCmdWriteTimestamp(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkQueryPool queryPool, uint32_t query) const; // NOLINT
    VkResult vkCreateBuffer(const VkBufferCreateInfo *pCreateInfo, VkBuffer *pBuffer) const; // NOLINT
    VkResult vkCreateBufferView(const VkBufferViewCreateInfo *pCreateInfo, VkBufferView *pView) const; // NOLINT
    VkResult vkCreateCommandPool(const VkCommandPoolCreateInfo *pCreateInfo, VkCommandPool *pCommandPool) const; // NOLINT
    VkResult vkCreateComputePipelines(VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkComputePipelineCreateInfo *pCreateInfos, VkPipeline *pPipelines) const; // NOLINT
    VkResult vkCreateDescriptorPool(const VkDescriptorPoolCreateInfo *pCreateInfo, VkDescriptorPool *pDescriptorPool) const; // NOLINT
    VkResult vkCreateDescriptorSetLayout(const VkDescriptorSetLayoutCreateInfo *pCreateInfo, VkDescriptorSetLayout *pSetLayout) const; // NOLINT
    VkResult vkCreateDescriptorUpdateTemplate(const VkDescriptorUpdateTemplateCreateInfo *pCreateInfo, VkDescriptorUpdateTemplate *pDescriptorUpdateTemplate) const; // NOLINT
    VkResult vkCreateDevice(const VkDeviceCreateInfo *pCreateInfo, VkDevice *pDevice) const; // NOLINT
    VkResult vkCreateEvent(const VkEventCreateInfo *pCreateInfo, VkEvent *pEvent) const; // NOLINT
    VkResult vkCreateFence(const VkFenceCreateInfo *pCreateInfo, VkFence *pFence) const; // NOLINT
    VkResult vkCreateFramebuffer(const VkFramebufferCreateInfo *pCreateInfo, VkFramebuffer *pFramebuffer) const; // NOLINT
    VkResult vkCreateGraphicsPipelines(VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkGraphicsPipelineCreateInfo *pCreateInfos, VkPipeline *pPipelines) const; // NOLINT
    VkResult vkCreateImage(const VkImageCreateInfo *pCreateInfo, VkImage *pImage) const; // NOLINT
    VkResult vkCreateImageView(const VkImageViewCreateInfo *pCreateInfo, VkImageView *pView) const; // NOLINT
    VkResult vkCreateInstance(const VkInstanceCreateInfo *pCreateInfo, VkInstance *pInstance) const; // NOLINT
    VkResult vkCreatePipelineCache(const VkPipelineCacheCreateInfo *pCreateInfo, VkPipelineCache *pPipelineCache) const; // NOLINT
    VkResult vkCreatePipelineLayout(const VkPipelineLayoutCreateInfo *pCreateInfo, VkPipelineLayout *pPipelineLayout) const; // NOLINT
    VkResult vkCreateQueryPool(const VkQueryPoolCreateInfo *pCreateInfo, VkQueryPool *pQueryPool) const; // NOLINT
    VkResult vkCreateRenderPass(const VkRenderPassCreateInfo *pCreateInfo, VkRenderPass *pRenderPass) const; // NOLINT
    VkResult vkCreateRenderPass2(const VkRenderPassCreateInfo2 *pCreateInfo, VkRenderPass *pRenderPass) const; // NOLINT
    VkResult vkCreateSampler(const VkSamplerCreateInfo *pCreateInfo, VkSampler *pSampler) const; // NOLINT
    VkResult vkCreateSamplerYcbcrConversion(const VkSamplerYcbcrConversionCreateInfo *pCreateInfo, VkSamplerYcbcrConversion *pYcbcrConversion) const; // NOLINT
    VkResult vkCreateSemaphore(const VkSemaphoreCreateInfo *pCreateInfo, VkSemaphore *pSemaphore) const; // NOLINT
    VkResult vkCreateShaderModule(const VkShaderModuleCreateInfo *pCreateInfo, VkShaderModule *pShaderModule) const; // NOLINT
    VkResult vkCreateSwapchainKHR(const VkSwapchainCreateInfoKHR *pCreateInfo, VkSwapchainKHR *pSwapchain) const; // NOLINT
    VkResult vkCreateXcbSurfaceKHR(const VkXcbSurfaceCreateInfoKHR *pCreateInfo, VkSurfaceKHR *pSurface) const; // NOLINT
    void vkDestroyBuffer(VkBuffer buffer) const; // NOLINT
    void vkDestroyBufferView(VkBufferView bufferView) const; // NOLINT
    void vkDestroyCommandPool(VkCommandPool commandPool) const; // NOLINT
    void vkDestroyDescriptorPool(VkDescriptorPool descriptorPool) const; // NOLINT
    void vkDestroyDescriptorSetLayout(VkDescriptorSetLayout descriptorSetLayout) const; // NOLINT
    void vkDestroyDescriptorUpdateTemplate(VkDescriptorUpdateTemplate descriptorUpdateTemplate) const; // NOLINT
    void vkDestroyDevice() const; // NOLINT
    void vkDestroyEvent(VkEvent event) const; // NOLINT
    void vkDestroyFence(VkFence fence) const; // NOLINT
    void vkDestroyFramebuffer(VkFramebuffer framebuffer) const; // NOLINT
    void vkDestroyImage(VkImage image) const; // NOLINT
    void vkDestroyImageView(VkImageView imageView) const; // NOLINT
    void vkDestroyInstance() const; // NOLINT
    void vkDestroyPipeline(VkPipeline pipeline) const; // NOLINT
    void vkDestroyPipelineCache(VkPipelineCache pipelineCache) const; // NOLINT
    void vkDestroyPipelineLayout(VkPipelineLayout pipelineLayout) const; // NOLINT
    void vkDestroyQueryPool(VkQueryPool queryPool) const; // NOLINT
    void vkDestroyRenderPass(VkRenderPass renderPass) const; // NOLINT
    void vkDestroySampler(VkSampler sampler) const; // NOLINT
    void vkDestroySamplerYcbcrConversion(VkSamplerYcbcrConversion ycbcrConversion) const; // NOLINT
    void vkDestroySemaphore(VkSemaphore semaphore) const; // NOLINT
    void vkDestroyShaderModule(VkShaderModule shaderModule) const; // NOLINT
    void vkDestroySurfaceKHR(VkSurfaceKHR surface) const; // NOLINT
    void vkDestroySwapchainKHR(VkSwapchainKHR swapchain) const; // NOLINT
    VkResult vkDeviceWaitIdle() const; // NOLINT
    VkResult vkEndCommandBuffer(VkCommandBuffer commandBuffer) const; // NOLINT
    VkResult vkEnumerateDeviceExtensionProperties(const char *pLayerName, uint32_t *pPropertyCount, VkExtensionProperties *pProperties) const; // NOLINT
    VkResult vkEnumerateDeviceLayerProperties(uint32_t *pPropertyCount, VkLayerProperties *pProperties) const; // NOLINT
    VkResult vkEnumerateInstanceExtensionProperties(const char *pLayerName, uint32_t *pPropertyCount, VkExtensionProperties *pProperties) const; // NOLINT
    VkResult vkEnumerateInstanceLayerProperties(uint32_t *pPropertyCount, VkLayerProperties *pProperties) const; // NOLINT
    VkResult vkEnumerateInstanceVersion(uint32_t *pApiVersion) const; // NOLINT
    VkResult vkEnumeratePhysicalDeviceGroups(uint32_t *pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties *pPhysicalDeviceGroupProperties) const; // NOLINT
    VkResult vkEnumeratePhysicalDevices(uint32_t *pPhysicalDeviceCount, VkPhysicalDevice *pPhysicalDevices) const; // NOLINT
    VkResult vkFlushMappedMemoryRanges(uint32_t memoryRangeCount, const VkMappedMemoryRange *pMemoryRanges) const; // NOLINT
    void vkFreeCommandBuffers(VkCommandPool commandPool, uint32_t commandBufferCount, const VkCommandBuffer *pCommandBuffers) const; // NOLINT
    VkResult vkFreeDescriptorSets(VkDescriptorPool descriptorPool, uint32_t descriptorSetCount, const VkDescriptorSet *pDescriptorSets) const; // NOLINT
    void vkFreeMemory(VkDeviceMemory memory) const; // NOLINT
    VkDeviceAddress vkGetBufferDeviceAddress(const VkBufferDeviceAddressInfo *pInfo) const; // NOLINT
    void vkGetBufferMemoryRequirements(VkBuffer buffer, VkMemoryRequirements *pMemoryRequirements) const; // NOLINT
    void vkGetBufferMemoryRequirements2(const VkBufferMemoryRequirementsInfo2 *pInfo, VkMemoryRequirements2 *pMemoryRequirements) const; // NOLINT
    uint64_t vkGetBufferOpaqueCaptureAddress(const VkBufferDeviceAddressInfo *pInfo) const; // NOLINT
    void vkGetDescriptorSetLayoutSupport(const VkDescriptorSetLayoutCreateInfo *pCreateInfo, VkDescriptorSetLayoutSupport *pSupport) const; // NOLINT
    void vkGetDeviceGroupPeerMemoryFeatures(uint32_t heapIndex, uint32_t localDeviceIndex, uint32_t remoteDeviceIndex, VkPeerMemoryFeatureFlags *pPeerMemoryFeatures) const; // NOLINT
    VkResult vkGetDeviceGroupPresentCapabilitiesKHR(VkDeviceGroupPresentCapabilitiesKHR *pDeviceGroupPresentCapabilities) const; // NOLINT
    VkResult vkGetDeviceGroupSurfacePresentModesKHR(VkSurfaceKHR surface, VkDeviceGroupPresentModeFlagsKHR *pModes) const; // NOLINT
    void vkGetDeviceMemoryCommitment(VkDeviceMemory memory, VkDeviceSize *pCommittedMemoryInBytes) const; // NOLINT
    uint64_t vkGetDeviceMemoryOpaqueCaptureAddress(const VkDeviceMemoryOpaqueCaptureAddressInfo *pInfo) const; // NOLINT
    PFN_vkVoidFunction vkGetDeviceProcAddr(const char *pName) const; // NOLINT
    void vkGetDeviceQueue(uint32_t queueFamilyIndex, uint32_t queueIndex, VkQueue *pQueue) const; // NOLINT
    void vkGetDeviceQueue2(const VkDeviceQueueInfo2 *pQueueInfo, VkQueue *pQueue) const; // NOLINT
    VkResult vkGetEventStatus(VkEvent event) const; // NOLINT
    VkResult vkGetFenceStatus(VkFence fence) const; // NOLINT
    void vkGetImageMemoryRequirements(VkImage image, VkMemoryRequirements *pMemoryRequirements) const; // NOLINT
    void vkGetImageMemoryRequirements2(const VkImageMemoryRequirementsInfo2 *pInfo, VkMemoryRequirements2 *pMemoryRequirements) const; // NOLINT
    void vkGetImageSparseMemoryRequirements(VkImage image, uint32_t *pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements *pSparseMemoryRequirements) const; // NOLINT
    void vkGetImageSparseMemoryRequirements2(const VkImageSparseMemoryRequirementsInfo2 *pInfo, uint32_t *pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2 *pSparseMemoryRequirements) const; // NOLINT
    void vkGetImageSubresourceLayout(VkImage image, const VkImageSubresource *pSubresource, VkSubresourceLayout *pLayout) const; // NOLINT
    void vkGetPhysicalDeviceExternalBufferProperties(const VkPhysicalDeviceExternalBufferInfo *pExternalBufferInfo, VkExternalBufferProperties *pExternalBufferProperties) const; // NOLINT
    void vkGetPhysicalDeviceExternalFenceProperties(const VkPhysicalDeviceExternalFenceInfo *pExternalFenceInfo, VkExternalFenceProperties *pExternalFenceProperties) const; // NOLINT
    void vkGetPhysicalDeviceExternalSemaphoreProperties(const VkPhysicalDeviceExternalSemaphoreInfo *pExternalSemaphoreInfo, VkExternalSemaphoreProperties *pExternalSemaphoreProperties) const; // NOLINT
    void vkGetPhysicalDeviceFeatures(VkPhysicalDeviceFeatures *pFeatures) const; // NOLINT
    void vkGetPhysicalDeviceFeatures2(VkPhysicalDeviceFeatures2 *pFeatures) const; // NOLINT
    void vkGetPhysicalDeviceFormatProperties(VkFormat format, VkFormatProperties *pFormatProperties) const; // NOLINT
    void vkGetPhysicalDeviceFormatProperties2(VkFormat format, VkFormatProperties2 *pFormatProperties) const; // NOLINT
    VkResult vkGetPhysicalDeviceImageFormatProperties(VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkImageFormatProperties *pImageFormatProperties) const; // NOLINT
    VkResult vkGetPhysicalDeviceImageFormatProperties2(const VkPhysicalDeviceImageFormatInfo2 *pImageFormatInfo, VkImageFormatProperties2 *pImageFormatProperties) const; // NOLINT
    void vkGetPhysicalDeviceMemoryProperties(VkPhysicalDeviceMemoryProperties *pMemoryProperties) const; // NOLINT
    void vkGetPhysicalDeviceMemoryProperties2(VkPhysicalDeviceMemoryProperties2 *pMemoryProperties) const; // NOLINT
    VkResult vkGetPhysicalDevicePresentRectanglesKHR(VkSurfaceKHR surface, uint32_t *pRectCount, VkRect2D *pRects) const; // NOLINT
    void vkGetPhysicalDeviceProperties(VkPhysicalDeviceProperties *pProperties) const; // NOLINT
    void vkGetPhysicalDeviceProperties2(VkPhysicalDeviceProperties2 *pProperties) const; // NOLINT
    void vkGetPhysicalDeviceQueueFamilyProperties(uint32_t *pQueueFamilyPropertyCount, VkQueueFamilyProperties *pQueueFamilyProperties) const; // NOLINT
    void vkGetPhysicalDeviceQueueFamilyProperties2(uint32_t *pQueueFamilyPropertyCount, VkQueueFamilyProperties2 *pQueueFamilyProperties) const; // NOLINT
    void vkGetPhysicalDeviceSparseImageFormatProperties(VkFormat format, VkImageType type, VkSampleCountFlagBits samples, VkImageUsageFlags usage, VkImageTiling tiling, uint32_t *pPropertyCount, VkSparseImageFormatProperties *pProperties) const; // NOLINT
    void vkGetPhysicalDeviceSparseImageFormatProperties2(const VkPhysicalDeviceSparseImageFormatInfo2 *pFormatInfo, uint32_t *pPropertyCount, VkSparseImageFormatProperties2 *pProperties) const; // NOLINT
    VkResult vkGetPhysicalDeviceSurfaceCapabilitiesKHR(VkSurfaceKHR surface, VkSurfaceCapabilitiesKHR *pSurfaceCapabilities) const; // NOLINT
    VkResult vkGetPhysicalDeviceSurfaceFormatsKHR(VkSurfaceKHR surface, uint32_t *pSurfaceFormatCount, VkSurfaceFormatKHR *pSurfaceFormats) const; // NOLINT
    VkResult vkGetPhysicalDeviceSurfacePresentModesKHR(VkSurfaceKHR surface, uint32_t *pPresentModeCount, VkPresentModeKHR *pPresentModes) const; // NOLINT
    VkResult vkGetPhysicalDeviceSurfaceSupportKHR(uint32_t queueFamilyIndex, VkSurfaceKHR surface, VkBool32 *pSupported) const; // NOLINT
    VkBool32 vkGetPhysicalDeviceXcbPresentationSupportKHR(uint32_t queueFamilyIndex, xcb_connection_t *connection, xcb_visualid_t visual_id) const; // NOLINT
    VkResult vkGetPipelineCacheData(VkPipelineCache pipelineCache, size_t *pDataSize, void *pData) const; // NOLINT
    VkResult vkGetQueryPoolResults(VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, size_t dataSize, void *pData, VkDeviceSize stride, VkQueryResultFlags flags) const; // NOLINT
    void vkGetRenderAreaGranularity(VkRenderPass renderPass, VkExtent2D *pGranularity) const; // NOLINT
    VkResult vkGetSemaphoreCounterValue(VkSemaphore semaphore, uint64_t *pValue) const; // NOLINT
    VkResult vkGetSwapchainImagesKHR(VkSwapchainKHR swapchain, uint32_t *pSwapchainImageCount, VkImage *pSwapchainImages) const; // NOLINT
    VkResult vkInvalidateMappedMemoryRanges(uint32_t memoryRangeCount, const VkMappedMemoryRange *pMemoryRanges) const; // NOLINT
    VkResult vkMapMemory(VkDeviceMemory memory, VkDeviceSize offset, VkDeviceSize size, VkMemoryMapFlags flags, void ** ppData) const; // NOLINT
    VkResult vkMergePipelineCaches(VkPipelineCache dstCache, uint32_t srcCacheCount, const VkPipelineCache *pSrcCaches) const; // NOLINT
    VkResult vkQueueBindSparse(VkQueue queue, uint32_t bindInfoCount, const VkBindSparseInfo *pBindInfo, VkFence fence) const; // NOLINT
    VkResult vkQueuePresentKHR(VkQueue queue, const VkPresentInfoKHR *pPresentInfo) const; // NOLINT
    VkResult vkQueueSubmit(VkQueue queue, uint32_t submitCount, const VkSubmitInfo *pSubmits, VkFence fence) const; // NOLINT
    VkResult vkQueueWaitIdle(VkQueue queue) const; // NOLINT
    VkResult vkResetCommandBuffer(VkCommandBuffer commandBuffer, VkCommandBufferResetFlags flags) const; // NOLINT
    VkResult vkResetCommandPool(VkCommandPool commandPool, VkCommandPoolResetFlags flags) const; // NOLINT
    VkResult vkResetDescriptorPool(VkDescriptorPool descriptorPool, VkDescriptorPoolResetFlags flags) const; // NOLINT
    VkResult vkResetEvent(VkEvent event) const; // NOLINT
    VkResult vkResetFences(uint32_t fenceCount, const VkFence *pFences) const; // NOLINT
    void vkResetQueryPool(VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount) const; // NOLINT
    VkResult vkSetEvent(VkEvent event) const; // NOLINT
    VkResult vkSignalSemaphore(const VkSemaphoreSignalInfo *pSignalInfo) const; // NOLINT
    void vkTrimCommandPool(VkCommandPool commandPool, VkCommandPoolTrimFlags flags) const; // NOLINT
    void vkUnmapMemory(VkDeviceMemory memory) const; // NOLINT
    void vkUpdateDescriptorSetWithTemplate(VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const void *pData) const; // NOLINT
    void vkUpdateDescriptorSets(uint32_t descriptorWriteCount, const VkWriteDescriptorSet *pDescriptorWrites, uint32_t descriptorCopyCount, const VkCopyDescriptorSet *pDescriptorCopies) const; // NOLINT
    VkResult vkWaitForFences(uint32_t fenceCount, const VkFence *pFences, VkBool32 waitAll, uint64_t timeout) const; // NOLINT
    VkResult vkWaitSemaphores(const VkSemaphoreWaitInfo *pWaitInfo, uint64_t timeout) const; // NOLINT
};

} // namespace vull
