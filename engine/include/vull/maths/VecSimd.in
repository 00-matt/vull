#ifdef __SSE__

template <>
class [[gnu::packed]] Vec<float, 4> : public VecBase<Vec<float, 4>> {
    __m128 m_data;

    template <unsigned I>
    [[gnu::always_inline]] float elem_at() const {
        return _mm_cvtss_f32(_mm_shuffle_ps(m_data, m_data, _MM_SHUFFLE(I, I, I, I)));
    }

public:
    Vec() : Vec(0.0f) {}
    Vec(float f) : m_data(_mm_set1_ps(f)) {}
    Vec(float x, float y, float z, float w) : m_data(_mm_set_ps(w, z, y, x)) {}
    Vec(const Vec2f &xy, float z, float w) : Vec(xy.x(), xy.y(), z, w) {}
    Vec(const Vec3f &xyz, float w) : Vec(xyz.x(), xyz.y(), xyz.z(), w) {}

#define ENUMERATE_OP(op, ope) Vec &operator ope(const Vec &rhs);
    ENUMERATE_OPS(ENUMERATE_OP)
#undef ENUMERATE_OP

    float &operator[](unsigned index);
    float operator[](unsigned index) const;
    float x() const { return elem_at<0>(); }
    float y() const { return elem_at<1>(); }
    float z() const { return elem_at<2>(); }
    float w() const { return elem_at<3>(); }
};

inline Vec<float, 4> &Vec<float, 4>::operator+=(const Vec<float, 4> &rhs) {
    m_data = _mm_add_ps(m_data, rhs.m_data);
    return *this;
}

inline Vec<float, 4> &Vec<float, 4>::operator-=(const Vec<float, 4> &rhs) {
    m_data = _mm_sub_ps(m_data, rhs.m_data);
    return *this;
}

inline Vec<float, 4> &Vec<float, 4>::operator*=(const Vec<float, 4> &rhs) {
    m_data = _mm_mul_ps(m_data, rhs.m_data);
    return *this;
}

inline Vec<float, 4> &Vec<float, 4>::operator/=(const Vec<float, 4> &rhs) {
    m_data = _mm_div_ps(m_data, rhs.m_data);
    return *this;
}

inline float &Vec<float, 4>::operator[](unsigned index) {
    return reinterpret_cast<float *>(__builtin_assume_aligned(&m_data, 4))[index];
}

inline float Vec<float, 4>::operator[](unsigned index) const {
    switch (index) {
    case 0:
        return elem_at<0>();
    case 1:
        return elem_at<1>();
    case 2:
        return elem_at<2>();
    case 3:
        return elem_at<3>();
    default:
        __builtin_unreachable();
    }
}

#endif
